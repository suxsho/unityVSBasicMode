//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/data/input/MyInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MyInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MyInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MyInput"",
    ""maps"": [
        {
            ""name"": ""GamePlay"",
            ""id"": ""e9633d8c-d121-4ea4-8cb1-780b9df75d55"",
            ""actions"": [
                {
                    ""name"": ""移动"",
                    ""type"": ""Value"",
                    ""id"": ""eb552505-0831-4736-bd14-849da6320d3d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""跳跃"",
                    ""type"": ""Button"",
                    ""id"": ""7bbb1052-ac0f-48ff-b2a6-e932d07b5061"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""鼠标"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5384ad51-c845-4a88-b9c7-64a9fd87696f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""b370cf54-801e-4623-97d7-b2e81f2043c1"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""移动"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8461b351-d6af-409b-9fdb-b7eba5763d26"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""移动"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""135b7a90-bb0f-4bbe-9546-b26bc6fba1b0"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""移动"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""529206a3-8b87-48eb-8fa3-30d02c50b6fd"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""移动"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8ea9c63c-ffc2-423b-b35f-66c0ca81da4c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""移动"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""03b8a9c5-a10e-4d86-b7dd-8e7ef6b1af46"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""跳跃"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1c7b24da-a5a3-4583-aaf5-a3a17d85bc8f"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""鼠标"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""d8f7e45b-97a6-4c38-a4bf-574c2a8ca63a"",
            ""actions"": [],
            ""bindings"": []
        }
    ],
    ""controlSchemes"": []
}");
        // GamePlay
        m_GamePlay = asset.FindActionMap("GamePlay", throwIfNotFound: true);
        m_GamePlay_移动 = m_GamePlay.FindAction("移动", throwIfNotFound: true);
        m_GamePlay_跳跃 = m_GamePlay.FindAction("跳跃", throwIfNotFound: true);
        m_GamePlay_鼠标 = m_GamePlay.FindAction("鼠标", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GamePlay
    private readonly InputActionMap m_GamePlay;
    private IGamePlayActions m_GamePlayActionsCallbackInterface;
    private readonly InputAction m_GamePlay_移动;
    private readonly InputAction m_GamePlay_跳跃;
    private readonly InputAction m_GamePlay_鼠标;
    public struct GamePlayActions
    {
        private @MyInput m_Wrapper;
        public GamePlayActions(@MyInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @移动 => m_Wrapper.m_GamePlay_移动;
        public InputAction @跳跃 => m_Wrapper.m_GamePlay_跳跃;
        public InputAction @鼠标 => m_Wrapper.m_GamePlay_鼠标;
        public InputActionMap Get() { return m_Wrapper.m_GamePlay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GamePlayActions set) { return set.Get(); }
        public void SetCallbacks(IGamePlayActions instance)
        {
            if (m_Wrapper.m_GamePlayActionsCallbackInterface != null)
            {
                @移动.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.On移动;
                @移动.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.On移动;
                @移动.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.On移动;
                @跳跃.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.On跳跃;
                @跳跃.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.On跳跃;
                @跳跃.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.On跳跃;
                @鼠标.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.On鼠标;
                @鼠标.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.On鼠标;
                @鼠标.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.On鼠标;
            }
            m_Wrapper.m_GamePlayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @移动.started += instance.On移动;
                @移动.performed += instance.On移动;
                @移动.canceled += instance.On移动;
                @跳跃.started += instance.On跳跃;
                @跳跃.performed += instance.On跳跃;
                @跳跃.canceled += instance.On跳跃;
                @鼠标.started += instance.On鼠标;
                @鼠标.performed += instance.On鼠标;
                @鼠标.canceled += instance.On鼠标;
            }
        }
    }
    public GamePlayActions @GamePlay => new GamePlayActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private IUIActions m_UIActionsCallbackInterface;
    public struct UIActions
    {
        private @MyInput m_Wrapper;
        public UIActions(@MyInput wrapper) { m_Wrapper = wrapper; }
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void SetCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterface != null)
            {
            }
            m_Wrapper.m_UIActionsCallbackInterface = instance;
            if (instance != null)
            {
            }
        }
    }
    public UIActions @UI => new UIActions(this);
    public interface IGamePlayActions
    {
        void On移动(InputAction.CallbackContext context);
        void On跳跃(InputAction.CallbackContext context);
        void On鼠标(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
    }
}
